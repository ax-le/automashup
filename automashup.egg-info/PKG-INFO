Metadata-Version: 2.4
Name: automashup
Version: 0.1.0
Summary: Package for automashup.
Home-page: https://github.com/ax-le/automashup
License: BSD
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Multimedia :: Sound/Audio :: Analysis
Classifier: Programming Language :: Python :: 3.10
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: allin1==1.1.0
Requires-Dist: barfi
Requires-Dist: matplotlib
Requires-Dist: demucs==4.0.1
Requires-Dist: essentia==2.1b6.dev1110
Requires-Dist: librosa==0.10.1
Requires-Dist: numpy==1.26.4
Requires-Dist: pandas
Requires-Dist: soundfile==0.12.1
Requires-Dist: streamlit
Requires-Dist: torch==2.2.2
Requires-Dist: torchaudio==2.2.2
Requires-Dist: pydub
Requires-Dist: pyrubberband
Requires-Dist: pyloudnorm
Requires-Dist: madmom@ git+https://github.com/CPJKU/madmom
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Automashup: Automatic Music Mashups Creation

Hi, and welcome to this GitHub repository, which is the companion repository for the article "Automashup: Automatic Music Mashups Creation," published at the GRETSI 2025 conference.

This repository contains two sub-repositories:
- "app - backend and frontend," that contains the AutoMashup core functions, including the Mashup creation process and the GUI webpage,
- "automatic song selection experiments" that contain the experiments related to the central part of the article, _i.e.,_ how to select pairs of songs that will be blended automatically. 

This repository is a regrouping of two other repositories:
- https://github.com/MichaelMikkles/AutoMashup/
- https://github.com/LeaMyl/Automashup_Mashup_Eval/
which were the practical repositories used for development.


https://github.com/user-attachments/assets/6c248242-a85b-4546-b142-1678b718c923


## Installation
So, basically, a lot of external packages essential for this project do not follow the recent releases. Hence, installation is getting more and more difficult.

To ensure that there will not be problem, you should defintely fix python to 3.10, and follow these steps (sorry for the inconvenience).

### Set up a virtualenv
First, set up the virtual environment. You may use the tool that you prefer, but we used conda on our side, hence we recommend it.

```bash
conda create -n venv_name python=3.10
conda activate venv_name
```

### Install the requirements
Now, you should install the required dependencies:

```bash
pip install -r requirements.txt
```

### Installing natten (for allin1)

This is actually one of the main problem. You should install natten so that it works with allin1. But allin1 was developed using old versions of natten, hence it is suited to work with precise versions.

So, you should use one precise version of natten, the following:

```bash
pip install natten==0.17.3+torch220cu121 -f https://shi-labs.com/natten/wheels
```

### Installing madmom

Then, you need to install madmom, to estimate beats and bars. This can be made using the following command:
```bash
pip install git+https://github.com/CPJKU/madmom
```

### Installing rubberband-cli

The last mandatory step is to install rubberband-cli on your machine, using:

```bash
sudo apt-get install rubberband-cli
```

### (Optional) Install FFmpeg for MP3 support
Finally, for mp3 support, you have to install ffmpeg
```bash
sudo apt install ffmpeg
```



### Launch the app

> cd ./automashup/src

> streamlit run app.py

## Other

To install and test DMC on your own: https://github.com/csteinmetz1/automix-toolkit (clone + set up (modify sklearn --> scikit-learn in the setup.py) and test directly on your machine, dont forget to modify the paths)

## Docker Image

We have a docker image of the automashup app, it's only been tested on Linux :
https://hub.docker.com/r/gaubiche/automashup/

## Adding Mashup Methods

The aim of this interface is to present multiple mashup technics.

You can add some to the application by creating a mashup function in the file /src/mashup.py and then modifying a little bit the file src/app.py

If you want to experiment around new mashup methods, you can see Notebooks, taht show examples of working mashup methods.
